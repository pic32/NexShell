#ifndef LS_COMMAND_H
	#define LS_COMMAND_H

/** \file
 * This file is the interface to the ls command.
 */

#include "NexShell.h"

#define LS_HELP_TEXT \
\
"Usage: " LS_COMMAND_NAME " [OPTION]... [FILE]..." SHELL_DEFAULT_END_OF_LINE_SEQUENCE \
SHELL_DEFAULT_END_OF_LINE_SEQUENCE \
SHELL_TAB "Lists the specified directories contents.  If no argument is supplied the working directory is used." SHELL_DEFAULT_END_OF_LINE_SEQUENCE \
SHELL_DEFAULT_END_OF_LINE_SEQUENCE \
SHELL_TAB "Options:" SHELL_DEFAULT_END_OF_LINE_SEQUENCE \
SHELL_TAB SHELL_TAB "-l        use a long listing format" SHELL_DEFAULT_END_OF_LINE_SEQUENCE \
SHELL_DEFAULT_END_OF_LINE_SEQUENCE \
SHELL_TAB "Examples:" SHELL_DEFAULT_END_OF_LINE_SEQUENCE \
SHELL_TAB SHELL_TAB LS_COMMAND_NAME SHELL_DEFAULT_END_OF_LINE_SEQUENCE \
SHELL_TAB SHELL_TAB LS_COMMAND_NAME " /folder-1/folder-2" SHELL_DEFAULT_END_OF_LINE_SEQUENCE \
SHELL_TAB SHELL_TAB LS_COMMAND_NAME " /folder-1 /another-folder-to-display" SHELL_DEFAULT_END_OF_LINE_SEQUENCE \
SHELL_TAB SHELL_TAB LS_COMMAND_NAME " ../" SHELL_DEFAULT_END_OF_LINE_SEQUENCE \
SHELL_TAB SHELL_TAB LS_COMMAND_NAME " -l" SHELL_DEFAULT_END_OF_LINE_SEQUENCE \
SHELL_DEFAULT_END_OF_LINE_SEQUENCE

 /*!
 * @union LS_OPTIONS
 *
 * @brief This data structure holds all the enable bits for options with the ls command.
 *
 * @param BYTE Value - The 8 bit value of the option bits to address in one read/write.
 *
 * @param unsigned int ListAll - If set, the ls command will list all files in the specified folders.
 * @param unsigned int LongListing - If set, the ls command will output additional data for each item.
 * @param unsigned int Reserved - Reserved for furture use.
 *
 * @details This data strucuture is used to set any flag bits of options that were parsed
 * out from the user arguments for the ls command.
 */
typedef union
{
	BYTE Value;

	struct
	{
		unsigned int ListAll : 1;
		unsigned int LongListing : 1;
		unsigned int Reserved : 6;
	}BITS;
}LS_OPTIONS;

/*!
 * @brief Main entry point for the ls command in the shell.
 *
 * @param[in] char* Args[] - An array of string arguments to process.
 *
 * @param[in] UINT32 NumberOfArgs - The number of valid arguments present in char *Args[].
 *
 * @param[in,out] PIPE* OutputStream - The stream that will get written to with any output.
 *
 * @return SHELL_RESULT - The outcome of the operation.
 *
 * @details
 * This function is what is eventually called when the user issues the ls command through
 * the shell.  Any output that is generated by the ls command is written to the OutputStream.
 */
SHELL_RESULT lsCommandExecuteMethod(char* Args[], UINT32 NumberOfArgs, PIPE* OutputStream);

#endif // end of LS_COMMAND_H
